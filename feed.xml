<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[portfolio]]></title><description><![CDATA[portfolio]]></description><link>http://slashgear.github.io</link><generator>RSS for Node</generator><lastBuildDate>Mon, 24 Apr 2017 13:53:19 GMT</lastBuildDate><atom:link href="http://slashgear.github.io/feed.xml" rel="self" type="application/rss+xml"/><item><title><![CDATA[MiXiT 2017]]></title><description><![CDATA[<h2 id="mixit-2017"><a href="#mixit-2017" class="phenomic-HeadingAnchor">#</a>MiXiT 2017</h2>
<p>Cette fin de semaine c'√©tait la nouvelle √©dition de la super <em>conf√©rence
lyonnaise avec des cr√™pes et du coeur.</em> Malgr√© le tirage au sort (tr√®s contest√©) mis en place cette ann√©e,
j'ai r√©ussi a obtenir le <em>golden ticket</em>.</p>
<p><strong>‚ö†Ô∏è Disclaimer, dans cet article, je donne ici mon ressenti sur cette √©dition du mixit.
Je vais essayer d'ajouter ici les liens vers les vid√©os des conf√©rences d√®s que les liens seront disponibles
Je ne parle pas de tous les talks auxquels j'ai pu assister.</strong></p>
<h2 id="une-introduction-toute-en-musique"><a href="#une-introduction-toute-en-musique" class="phenomic-HeadingAnchor">#</a>Une introduction toute en musique</h2>
<p>Tout a commenc√© avec une super introduction musicale autour de la gestion de groupe
g√©r√© d'une main de ma√Ætre ...du moins d'une baguette de chef d'orchestre par Samuel Couffignal.
Tr√®s bel exemple de l'autogestion d'un groupe et du pouvoir d'action qu'un leader peut avoir sur un groupe.</p>
<p>Je vous passe l'anecdotique pr√©sentation de la monnaie locale : <em><a href="http://www.lagonette.org/">La gonette</a></em></p>
<h2 id="jour-1"><a href="#jour-1" class="phenomic-HeadingAnchor">#</a>Jour 1</h2>
<h3 id="elm-on-l-on-l-pas"><a href="#elm-on-l-on-l-pas" class="phenomic-HeadingAnchor">#</a>Elm on l'‚ô•Ô∏è, on l'‚ô•Ô∏è pas</h3>
<p>Premier talk, j'attaque par la pr√©sentation de Jordane
Grenat sur ELM, une alternative pour le monde JS. Une pr√©sentation bien sympathique de l'environnement et de ses avantages.
Beaucoup d'avantages sur cette plateforme, notamment le compilateur qui a vraiment √©t√© orient√© utilisateur.
L'analyse d'erreur de compilation est tr√®s fine et donne beaucoup d'informations sur la r√©solution de l'erreur.
Je reste cependant pas du tout convaincu par la syntaxe que je trouve beaucoup trop concise
et du coup pas forc√©ment lisible. Et oui ceci est une fonction qui fait juste une addition.</p>
<pre><code class="hljs language-elm"><span class="hljs-title">add</span> x y =
  x + y</code></pre>
<p>Je pense qu'avec de la pratique la syntaxe doit moins piquer les yeux mais quand m√™me.</p>
<h3 id="electron-par-les-copains-nantais"><a href="#electron-par-les-copains-nantais" class="phenomic-HeadingAnchor">#</a>Electron par les copains nantais</h3>
<p>Contrairement √† ce qu'on peut lire sur le slack de Zenika, Yvonnick Frin ne fait pas que de l'ionic ;)
Il est m√™me venu avec son coll√®gue Eric Briand pour nous montrer Electron, la solution Github pour
d√©velopper des applications desktop avec nos bonnes "vieilles" technologies front.
Difficile de rentrer dans certains d√©tails qui font pol√©mique notamment la consommation
des resources, mais cette pr√©sentation sait nous montrer les bases pour qu'on puisse commencer √† faire joujou
avec Electron.</p>
<h3 id="√âthique-et-tac-"><a href="#%C3%89thique-et-tac-" class="phenomic-HeadingAnchor">#</a>√âthique et tac !</h3>
<p>Quand un ancien journaliste de Numerama et actuel directeur de l'√©thique chez Qwant (Guillaume Champeau) vient nous parler d'√©thique, on se rappelle qu'on est bien √† MiXiT.
La conf√©rence a abord√© des th√©matiques comme les responsabilisations du d√©veloppeur sur ce qu'il produit, le respect de la vie priv√©e, etc.
Sans parler d'un monde √† la <em>Mister Robot,</em> on peut quand m√™me faire le constat que notre sph√®re priv√©e et intime
ne nous appartient aujourd'hui plus tout √† fait. A voir absolument, surtout si un complotiste sommeille en vous.</p>
<h3 id="-is-awesome"><a href="#-is-awesome" class="phenomic-HeadingAnchor">#</a>ü¶Ñ is awesome!!</h3>
<p>Dans le monde du web journalisme on parle souvent de titre putaclick et ce talk aurait
quand m√™me eu un prix pour son nom : <em>Css is awesome!</em>
Derri√®re ce titre tr√®s racoleur se cachait une intervention tr√®s bien d√©taill√©e sur la puissance propre de CSS.
Par des exemples simples, Igor Labori nous partage quelques tricks CSS bien pratiques mais √©galement quelques
balises HTML5 oubli√©es.</p>
<p><details>
<summary>S√©rieusement vous connaissez cette balise ?</summary>
Et oui, on a pu voir quelques balises html cool aussi
</details></p>
<h3 id="futur-of-kotlin-oui-je-sais-encore-du-kotlin"><a href="#futur-of-kotlin-oui-je-sais-encore-du-kotlin" class="phenomic-HeadingAnchor">#</a>Futur of Kotlin <em>Oui je sais, encore du Kotlin</em></h3>
<p>Quand Mr Andrey Breslav lui-m√™me se d√©place √† Lyon pour parler Kotlin, je me devais de venir suivre sa conf√©rence.
Outre la pr√©sentation des approximatives prochaines features (non-beta) de Kotlin, Andrey a pu nous partager
son exp√©rience de cr√©ateur de langage. A voir si on veut se tenir au courant des nouveaut√©s de Kotlin et si
on s'int√©resse √† la conception de langage.</p>
<h3 id="progressive-web-apps-rien-de-nouveau"><a href="#progressive-web-apps-rien-de-nouveau" class="phenomic-HeadingAnchor">#</a>Progressive Web Apps, rien de nouveau</h3>
<p>Un peu d√©√ßu de la pr√©sentation sur les progressive web apps, je ne m'attendais pas
√† une initiation PWA en 2017 sachant que ces concepts avaient √©t√© d√©j√† pr√©sent√©s √† MiXiT
il y a 2 ans. Mais apr√®s je fais mon difficile, la pr√©sentation √©tait tr√®s compl√®te pour une initiation
alors foncez la voir si pour vous les PWA sont un monde obscure.</p>
<h2 id="la-soir√©e-√†-lhotel-de-ville"><a href="#la-soir%C3%A9e-%C3%A0-lhotel-de-ville" class="phenomic-HeadingAnchor">#</a>La soir√©e √† l'hotel de ville</h2>
<p><img src="/assets/mixit17/soiree.jpg" alt="Soir√©e Mix-it 2017"></p>
<h2 id="jour-2"><a href="#jour-2" class="phenomic-HeadingAnchor">#</a>Jour 2</h2>
<p>On passe sur la keynote un peu trop <em>commercialobullshitojustu</em> de Regen Villages
qui semble plus concentr√© sur sa communication publicitaire que sur la qualit√© de ses slides.</p>
<h3 id="un-petit-talk-sur-le-monde-myst√©rieux-de-lergonomie"><a href="#un-petit-talk-sur-le-monde-myst%C3%A9rieux-de-lergonomie" class="phenomic-HeadingAnchor">#</a>Un petit talk sur le monde myst√©rieux de l'ergonomie</h3>
<p>Et si on apprenait un peu √† dialoguer avec un ergonome ? Ici Nathalie Cott√© nous partage son exp√©rience en tant
qu'ergonome au sein d'une soci√©t√© d'√©dition de soft.
Son retour et ses conseils sont tr√®s appr√©ciables, elle nous donne un m√©thodologie assez simple pour am√©liorer
l'ergonomie de son application afin d'√©viter l'√©chec aupr√®s des utilisateurs. A voir absolument si vous voulez arr√™ter
de devoir former vos utilisateurs sur vos applications.</p>
<h3 id="la-vexillologie-pour-les-nuls-"><a href="#la-vexillologie-pour-les-nuls-" class="phenomic-HeadingAnchor">#</a>La vexil<strong>LOL</strong>ogie pour les nuls üá´üá∑</h3>
<p>Quand un passion√© nous montre son b√©b√©/son chef d'oeuvre autour de CSS et de la science des drapeaux,
√ßa nous donne un talk hyper int√©ressant. Le d√©fi fou de faire les drapeaux du monde entier avec un
seul <code>div</code> et uniquement du CSS, c'est quand m√™me beau. Le talk est en plus tr√®s bien con√ßu pour pouvoir comprendre la d√©marche
et les solutions techniques mises en place. (<a href="https://pixelastic.github.io/css-flags/">Le lien vers la page de ses drapeaux</a>)</p>
<p><img src="/assets/mixit17/fun.gif" alt="Fun with flags"></p>
<h3 id="un-revenu-universel-d√©mystifi√©"><a href="#un-revenu-universel-d%C3%A9mystifi%C3%A9" class="phenomic-HeadingAnchor">#</a>Un revenu universel d√©mystifi√©</h3>
<p>Quand on voit cette conf on se dit que la f√™te de l'huma √ßa a bien chang√©, attendez... heu non on est √† MiXiT en fait.
Ce talk, qu'on pourrait critiquer dans le contexte actuel des √©lections cache en fait une pr√©sentation assez claire sur ce qu'est
concr√™tement le revenu universel.</p>
<h3 id="random-talk--se-lib√©rer-du-temps"><a href="#random-talk--se-lib%C3%A9rer-du-temps" class="phenomic-HeadingAnchor">#</a>Random talk => se lib√©rer du temps</h3>
<p>Et si on se d√©gageait une journ√©e par semaine pour vraiment faire ce dont on a envie.
Est on pr√™t √† se passer de 20% de notre salaire pour enfin avoir du temps pour soi.
Tout cela √©tait le sujet du random talk auquel j'ai eu le droit de participer le deuxi√®me jour.
Une belle introduction au <em>travailler autrement</em>.</p>
<h3 id="cosmogonie-informatique-et-trou-noir-un-super-vrai--pour-finir"><a href="#cosmogonie-informatique-et-trou-noir-un-super-vrai--pour-finir" class="phenomic-HeadingAnchor">#</a>Cosmogonie, informatique et trou noir, un super vrai üëΩ pour finir</h3>
<p>Apr√®s deux jours de conf√©rences, j'avais envie de me changer les id√©es et voir autre chose. Alors, pour finir,
je suis all√© voir une pr√©sentation typiquement alien sur l'univers et les trous noirs. Le talk est vraiment passionnant
et ne semble pas avoir d√©√ßu la foule pr√©sente dans la salle. On notera quand m√™me sur les panneaux de feedback que
cette pr√©sentation manquait cruellement de d√©mo.</p>
<h1 id="conclusion"><a href="#conclusion" class="phenomic-HeadingAnchor">#</a>Conclusion</h1>
<p>Encore une super √©dition concoct√©e par les b√©n√©voles de MiXiT. Merci √† eux.
Je reste quand m√™me sur ma faim avec certaines keynotes, mais le cru 2017 reste quand m√™me une
bonne ann√©e.</p>
<p><em>Merci <a href="https://twitter.com/npayot">@npayot</a> (aka flipper le dauphin) serial blagueur et photographe √† ses heures perdues pour la photo de l'article</em></p>
<p><em>Merci √† <a href="https://twitter.com/hdurix">@hdurix</a> pour la revue</em></p>
]]></description><link>http://slashgear.github.io/posts/mixit17/</link><guid isPermaLink="true">http://slashgear.github.io/posts/mixit17/</guid><pubDate>Thu, 20 Apr 2017 00:00:00 GMT</pubDate></item><item><title><![CDATA[Github classroom - un outil √† tester]]></title><description><![CDATA[<h1 id="github-classroom-pourquoi-vous-devriez-lutiliser"><a href="#github-classroom-pourquoi-vous-devriez-lutiliser" class="phenomic-HeadingAnchor">#</a>Github classroom, pourquoi vous devriez l'utiliser</h1>
<p><strong>Lorsque j'ai commenc√© √† enseigner en septembre dernier, je recherchais une solution
pour pouvoir suivre facilement l'avanc√©e des √©tudiants pendant leur TP. J'ai d'abord song√© √† leur
demander l'acc√®s √† leur repository Github/Bitbucket... mais je me suis vite rendu compte que √ßa
n'allait pas √™tre g√©rable durablement. J'ai alors cherch√© une solution cl√© en main.</strong></p>
<p>Je suis alors tomb√© au hasard de mes recherches sur le forum de la <a href="https://education.github.community">communaut√© des
enseignants sur Github</a>. Une communaut√© tr√®s active et dont le sujet
principal de discussion est <strong>Github classroom</strong>. J'ai alors d√©cortiqu√© cette solution propos√©e par Github
afin de la tester au plus vite avec mes √©tudiants.</p>
<h1 id="constat-en-tp-on-est-tr√®s-mal-√©quip√©"><a href="#constat-en-tp-on-est-tr%C3%A8s-mal-%C3%A9quip%C3%A9" class="phenomic-HeadingAnchor">#</a>Constat, en TP on est tr√®s mal √©quip√©</h1>
<p>Avant de vous d√©crire le fonctionnement et la mise en place de cet outil avec vos √©tudiants,
je pr√©f√®re faire une petite liste des probl√®mes que j'ai pu rencontrer en tant que professeur
ou m√™me en tant qu'√©tudiant lors de la r√©alisation d'un TP.</p>
<ul>
<li>
<p><strong>D√©marrer votre TP en 5 minutes avec vos √©tudiants, impossible.</strong>
Il est clair que passer une cl√© usb de PC en PC pour distribuer soit les sources du TP soit
le sujet ce n'est pas pratique. On observe facilement que certains √©tudiants
ne commencent alors leur TP qu'au bout de 15/20 minutes.</p>
</li>
<li>
<p><strong>Difficile de suivre l'avancement des √©tudiants.</strong>
Il arrive que des √©tudiants souhaitent avoir de l'aide pour r√©soudre un probl√®me
avec leur projet. Sans outils, on est souvent oblig√© de faire de nombreux √©changes par
mail pour finir par se comprendre et r√©ussir √† apporter son aide. Se contextualiser
en lisant un mail o√π l'√©l√®ve l√¢che juste un <em>√ßa marche pooo !</em>, c'est pas tr√®s facile.</p>
</li>
<li>
<p><strong>Le rapport, le code du projet, les mails d'√©changes avec les √©tudiants, √† des endroits diff√©rents.</strong>
Le rendu du TP, il faut l'avouer c'est vraiment l'√©tape la plus √©nervante.
Entre les √©tudiants qui oublient la moiti√© des choses √† rendre, les retards,
les outils de la facult√© qui ne marchent pas, centraliser et noter les travaux pratiques des √©tudiants
devient vite un v√©ritable calvaire que l'on traine sur plusieurs jours.</p>
</li>
<li>
<p><strong><em>"Non Monsieur j'ai pas copi√©" :</em></strong>
Trop de fois les √©tudiants se Ctrl-C/Ctrl-V les TPs et cela peut √™tre
tr√®s compliqu√© de v√©rifier qu'un √©tudiant n'a pas juste recopi√© le code de son coll√®gue.</p>
</li>
</ul>
<ul>
<li>
<p><strong><em>"Et toi t'as fait quoi sur ce TP ?"</em></strong>
Et oui, parfois, quand les √©tudiants sont en groupe, un fain√©ant peut se cacher au milieu.
Il est donc difficile d'√©valuer r√©ellement la compr√©hension individuelle dans cette situation.</p>
</li>
<li>
<p><strong>Comment v√©rifier que leur TP marche ? Dois-je l'installer ?</strong>
40 √©l√®ves, TP par bin√¥me, cela fait 20 TP √† installer et √† v√©rifier. Il arrive que l'√©l√®ve ait
configur√© son projet un peu bizarrement et il vous faudra au moins 10 minutes pour comprendre
ce qu'il a fait.</p>
</li>
</ul>
<h1 id="pr√©parer-un-tp-avec-github-classroom"><a href="#pr%C3%A9parer-un-tp-avec-github-classroom" class="phenomic-HeadingAnchor">#</a>Pr√©parer un TP avec Github Classroom</h1>
<p>Alors d√©j√† pour √™tre clair, utiliser un outil comme <strong>Github Classroom</strong> n√©cessite du temps
de pr√©paration suppl√©mentaire. Il y a tout un tas de choses √† configurer avant la premi√®re s√©ance
avec ses √©l√®ves. Cependant, ce temps de pr√©paration va √™tre largement r√©cup√©r√© d√®s que le TP aura commenc√©.</p>
<h2 id="un-outil-bien-expliqu√©"><a href="#un-outil-bien-expliqu%C3%A9" class="phenomic-HeadingAnchor">#</a>Un outil bien expliqu√©</h2>
<p>Cet outil a une prise en main assez √©vidente, mais Github nous a quand m√™me fourni
plusieurs vid√©os explicatives qui suffisent √† comprendre son utilisation.</p>
<blockquote>
<p>Getting started</p>
<div style="position:relative;height:0;padding-bottom:56.25%"><iframe src="https://www.youtube.com/embed/ChA_zph7aao?ecver=2" width="640" height="360" frameborder="0" style="position:absolute;width:100%;height:100%;left:0" allowfullscreen></iframe></div>
</blockquote>
<blockquote>
<p>How to set up group assignments</p>
<div style="position:relative;height:0;padding-bottom:56.25%"><iframe src="https://www.youtube.com/embed/-52quDR2QSc?ecver=2" width="640" height="360" frameborder="0" style="position:absolute;width:100%;height:100%;left:0" allowfullscreen></iframe></div>
</blockquote>
<h2 id="les-contraintes"><a href="#les-contraintes" class="phenomic-HeadingAnchor">#</a>Les contraintes</h2>
<p>Cet outil n'est pas magique, il impose quelques contraintes qui peuvent √™tre
bloquantes pour vous et vos √©tudiants.</p>
<ul>
<li>Il vous faut un compte Github</li>
<li>Tous les √©l√®ves doivent avoir un compte Github, il peut √™tre difficile d'imposer √ßa aux √©l√®ves</li>
<li>Vous devez maitriser Git et bien connaitre l'interface de Github.</li>
<li>Vos √©l√®ves doivent √™tre autonomes avec Git.</li>
<li>Vous devez cr√©er une organisation sur Github (en quelques clics)</li>
<li>Les sources des TP et les r√©alisations de vos √©tudiants seront publiques si <a href="https://education.github.com/discount_requests/new">vous
ne demandez pas une organisation priv√©e √† Github pour votre √©cole.</a></li>
</ul>
<h2 id="les-√©tapes-√†-respecter"><a href="#les-%C3%A9tapes-%C3%A0-respecter" class="phenomic-HeadingAnchor">#</a>Les √©tapes √† respecter</h2>
<h3 id="1-pr√©parer-vos-sources-et-votre-√©nonc√©"><a href="#1-pr%C3%A9parer-vos-sources-et-votre-%C3%A9nonc%C3%A9" class="phenomic-HeadingAnchor">#</a>1. Pr√©parer vos sources et votre √©nonc√©</h3>
<p>Il vous faudra tout d'abord d√©poser vos sources sur un d√©pot Github en
veillant √† bien le nommer pour le retrouver par la suite. Il faut aussi veiller √† ne pas
<em>marquer</em> vos TP par les fichiers de configuration de votre IDE. En effet,
vos √©tudiants n'utiliseront pas forc√©ment le m√™me que vous et ces fichiers pourraient les g√™ner/les troubler
<em>(il en faut peu)</em></p>
<p>Je vous conseille √©galement de r√©diger l'√©nonc√© en <a href="https://guides.github.com/features/mastering-markdown/">Markdown</a>
directement dans le fichier <code>README.md</code> .</p>
<p>Enfin, histoire de tout centraliser au m√™me endroit, je vous pousse √†
d√©finir un fichier <code>Rapport.md</code> pour que les √©tudiants r√©digent √©galement leur rapport en Markdown.
(Apr√®s un premier test, les √©tudiants ont bien appr√©ci√© le Markdown. Tr√®s simple √† comprendre, il leur a
permis d'ins√©rer du code mais √©galement des images dans leur rapport sans pr√™ter attention √† la mise en page)</p>
<p>Pour terminer, <a href="https://github.com/PolytechLyon/isi3-tp1-graph">voici un exemple de TP que j'ai configur√© pour mes √©tudiants.</a></p>
<h3 id="2-configurer-votre-assignement"><a href="#2-configurer-votre-assignement" class="phenomic-HeadingAnchor">#</a>2. Configurer votre <em>assignement</em></h3>
<p>Une fois votre TP d√©pos√© sur un d√©p√¥t Github, il ne vous reste plus qu'√† d√©finir une <code>instance</code>
de TP depuis l'interface de Github Classroom.</p>
<p><img src="/assets/github-classroom/create-assignement.png" alt="Cr√©er un assignement"></p>
<p>Quelques petites astuces pour cr√©er vos <em>assignements</em> :</p>
<ul>
<li>Bien pr√©ciser les classes, groupes, ann√©e dans le titre.</li>
<li>Indiquer votre starter code de l'√©tape 1.</li>
<li>Vous pouvez bloquer le nombre maximum d'√©l√®ves par groupe.</li>
<li>Vous pouvez reprendre les √©quipes entre les diff√©rents TP d'une m√™me mati√®re.</li>
</ul>
<h3 id="3-diffuser-votre-tp-√†-vos-√©l√®ves"><a href="#3-diffuser-votre-tp-%C3%A0-vos-%C3%A9l%C3%A8ves" class="phenomic-HeadingAnchor">#</a>3. Diffuser votre TP √† vos √©l√®ves</h3>
<p>Cette √©tape vous fera gagner un temps pr√©cieux, en effet, une fois votre <em>assignement</em> cr√©√©
l'outil vous g√©n√®re un lien qui permettra aux √©tudiants de s'y connecter et de se regrouper.</p>
<p>Dans le cas des TP en groupe, un √©tudiant doit s'y connecter et cr√©er son √©quipe, les autres pourront
ensuite la rejoindre.</p>
<p>Un <em>repository</em> sera alors cr√©√© par √©quipe.</p>
<h3 id="4-suivre-vos-√©l√®ves-dans-leurs-d√©veloppements"><a href="#4-suivre-vos-%C3%A9l%C3%A8ves-dans-leurs-d%C3%A9veloppements" class="phenomic-HeadingAnchor">#</a>4. Suivre vos √©l√®ves dans leurs d√©veloppements</h3>
<p>Vos √©tudiants vont un peu vous prendre pour la NSA, mais rassurez-les c'est pour leur bien.
Une fois les d√©pots cr√©√©s, vous pourrez voir sur votre page d'accueil github tous les commits
de vos √©tudiants. Cela vous permettra de faire de la <em>review</em> au fil de l'eau si vous avez le temps.</p>
<p>Vous pouvez √©galement voir avec eux pour qu'ils ouvrent une <em>issue</em> s'ils ont besoin de votre aide.
Dans cette situation vous serez notifi√© par mail. L'√©tudiant pourra m√™me vous indiquer dans l'<em>issue</em>
le code qui lui pose probl√®me.</p>
<h3 id="5-√âvaluer-leurs-r√©alisations"><a href="#5-%C3%89valuer-leurs-r%C3%A9alisations" class="phenomic-HeadingAnchor">#</a>5. √âvaluer leurs r√©alisations</h3>
<p>Pour l'√©valuation vous avez deux solutions :</p>
<ul>
<li>Inspecter leur <em>repository</em> et lire leur code. Pour cela je ne peux que vous conseiller
l'extension <a href="https://chrome.google.com/webstore/detail/octotree/bkhaagjahfmjljalopjnoealnfndnagc">Octotree</a>
qui vous permet d'afficher l'arbre des fichiers du d√©p√¥t.</li>
<li>Mettre en place des tests unitaires sur le projet de base et connecter un outil de CI en SaaS comme travis-ci.</li>
</ul>
]]></description><link>http://slashgear.github.io/posts/github-classroom/</link><guid isPermaLink="true">http://slashgear.github.io/posts/github-classroom/</guid><pubDate>Sat, 25 Mar 2017 00:00:00 GMT</pubDate></item><item><title><![CDATA[Angular basics]]></title><description><![CDATA[<h1 id="angular-basics"><a href="#angular-basics" class="phenomic-HeadingAnchor">#</a>Angular basics</h1>
<p>Those are my slides for the course I gave about Angular to students of Polytech Lyon in september 2016.</p>
<div style="position:relative;height:0;padding-bottom:56.25%">
<iframe src="https://slashgear.github.io/angular2-basics/#/" width="640" height="360" frameborder="0" style="position:absolute;width:100%;height:100%;left:0" allowfullscreen></iframe>
</div>
]]></description><link>http://slashgear.github.io/posts/angular-training/</link><guid isPermaLink="true">http://slashgear.github.io/posts/angular-training/</guid><pubDate>Thu, 15 Sep 2016 00:00:00 GMT</pubDate></item><item><title><![CDATA[Docker basics]]></title><description><![CDATA[<h1 id="docker-basics"><a href="#docker-basics" class="phenomic-HeadingAnchor">#</a>Docker basics</h1>
<p>Those are my slides for the course I gave about docker to students of Polytech Lyon in september 2016.</p>
<div style="position:relative;height:0;padding-bottom:56.25%">
<iframe src="https://slashgear.github.io/docker-basics/#/" width="640" height="360" frameborder="0" style="position:absolute;width:100%;height:100%;left:0" allowfullscreen></iframe>
</div>
]]></description><link>http://slashgear.github.io/posts/docker-training/</link><guid isPermaLink="true">http://slashgear.github.io/posts/docker-training/</guid><pubDate>Sat, 10 Sep 2016 00:00:00 GMT</pubDate></item><item><title><![CDATA[Generator Rancher Catalog]]></title><description><![CDATA[<h1 id="generator-rancher-catalog"><a href="#generator-rancher-catalog" class="phenomic-HeadingAnchor">#</a>Generator Rancher Catalog</h1>
<p>You can add private catalog entry in your Rancher instances, but creating
configuration files could be really hard.</p>
<p>In order to avoid errors, I create a <a href="https://github.com/Slashgear/generator-rancher-catalog">generator for Rancher catalog entry based on
yeoman.</a></p>
<pre><code class="hljs language-bash">npm install -g yo
npm install -g generator-rancher-catalog</code></pre>
<p>Then generate your new project:</p>
<pre><code class="hljs language-bash">yo rancher-catalog</code></pre>
<p>Don't hesitate to contribute, PR are welcome.</p>
<p><a href="https://asciinema.org/a/644asuhwcljfkzm3j4g9j6qsg"><img src="https://asciinema.org/a/644asuhwcljfkzm3j4g9j6qsg.png" alt="asciicast"></a></p>
]]></description><link>http://slashgear.github.io/posts/generator-rancher-catalog/</link><guid isPermaLink="true">http://slashgear.github.io/posts/generator-rancher-catalog/</guid><pubDate>Mon, 20 Jun 2016 00:00:00 GMT</pubDate></item><item><title><![CDATA[Rancher - How to]]></title><description><![CDATA[<h1 id="rancher-un-orchestrateur-petit-mais-puissant"><a href="#rancher-un-orchestrateur-petit-mais-puissant" class="phenomic-HeadingAnchor">#</a>Rancher, un orchestrateur petit mais puissant</h1>
<p>Mon exp√©rience en tant que stagiaire chez Zenika m‚Äôa amen√© √† utiliser
Rancher pour orchestrer mes conteneurs Docker. Je vous pr√©sente ici un
condens√© de mon exp√©rience avec cet outil, de son int√©r√™t et de ses
points forts, par le biais d‚Äôun petit ‚ÄúHow to‚Äú sur comment d√©ployer son
application ?</p>
<p>On constate que de plus en plus d‚Äôutilisateurs Docker cherchent √†
manipuler plus facilement leurs conteneurs et √† mettre en place du
d√©ploiement continu. L‚Äôenvironnement technique autour de la
probl√©matique d‚Äôorchestration des mod√®les CaaS (Container as a Service)
est tr√®s large et il est parfois difficile de s‚Äôy retrouver.</p>
<h2 id="quen-est-t-il-de-rancher-"><a href="#quen-est-t-il-de-rancher-" class="phenomic-HeadingAnchor">#</a>Qu‚Äôen est-t-il de Rancher ?</h2>
<h3 id="k√©sako"><a href="#k%C3%A9sako" class="phenomic-HeadingAnchor">#</a>K√©sako</h3>
<p>Rancher, projet open-source cr√©√© par la soci√©t√© Rancher Labs est un
outil gratuit d‚Äôorchestration de conteneurs Docker. Il permet de
facilement d√©ployer des conteneurs Docker sur des machines poss√©dant
Docker. Gr√¢ce √† une configuration simple et compl√®te, il permet de lier
ses conteneurs afin de composer des architectures de services ais√©ment.
Il peut d√©ployer des containeurs sur des services cloud comme AWS,
Azure, DigitalOcean mais aussi sur des machines personnalis√©es
poss√©dant Docker tout en s‚Äôappuyant sur docker-machine.</p>
<h3 id="une-installation-assez-simple"><a href="#une-installation-assez-simple" class="phenomic-HeadingAnchor">#</a>Une installation assez simple</h3>
<p>Pour installer Rancher, √† ce jour il suffit de poss√©der une machine
linux 64-bit avec au moins 1GB de m√©moire vive.</p>
<pre><code class="hljs language-bash">$ sudo docker run <span class="hljs-_">-d</span> --restart=always -p 8080:8080 rancher/server</code></pre>
<p>Apr√®s quelques minutes d‚Äôinstallation, le server Rancher est disponible
sur le port 8080 de votre machine (l‚Äôimage contient une base MySQL, un
Zookeeper, Redis, et le serveur rancher). Vous pouvez vous y connecter
car l‚Äôacc√®s est par d√©faut ouvert √† tous. Par la suite,  vous pourrez
activer l‚Äôauthentification,et ainsi facilement configurer des comptes
pour vos utilisateurs.</p>
<p><img src="/assets/rancher/Environnement.png" alt="Interface graphique de Rancher"></p>
<h3 id="d√©ployer-une-application-simple-avec-rancher"><a href="#d%C3%A9ployer-une-application-simple-avec-rancher" class="phenomic-HeadingAnchor">#</a>D√©ployer une application simple avec Rancher</h3>
<p>Apr√®s l‚ÄôIaaS, le SaaS, le PaaS, le DaaS et Patricia Kaas, voila
maintenant venue l‚Äô√®re du Caas (Container as a Service). L‚Äôobjectif
ici est de conteneuriser les services de son(ses) application(s) et de
les faire interagir. Pour montrer simplement la m√©canique de Rancher,
j‚Äôai choisi de vous pr√©senter le d√©ploiement d‚Äôune application web tr√®s
simple nomm√©e whoami, disponible sur le Docker Hub (d√©velopp√© en Go
par Emile Vauge).</p>
<p>Pour ce faire, je vais vous expliquer  la m√©thode de cr√©ation de
services par l‚Äôinterface graphique. Sachez que l‚Äôon peut interagir
avec Rancher par l‚Äôinterm√©diaire d‚Äôun outil en ligne de commande
(rancher-cli,encore tr√®s limit√© pour l‚Äôinstant) ou d‚ÄôAPI REST.</p>
<h4 id="ajouter-des-hosts-sur-lesquels-d√©ployer"><a href="#ajouter-des-hosts-sur-lesquels-d%C3%A9ployer" class="phenomic-HeadingAnchor">#</a>Ajouter des hosts sur lesquels d√©ployer</h4>
<p>Dans un premier temps il faut d√©finir des machines sur lesquelles
d√©ployer votre application.</p>
<p><img src="/assets/rancher/machine.png" alt="Cr√©ation de machines"></p>
<p>Rancher propose des connecteurs √† plusieurs services cloud du web comme
Amazon EC2, Azure, Digital Ocean, mais vous pouvez √©galement ajouter
n‚Äôimporte quelle machine disposant de docker comme ‚Äúhost‚Äù Rancher
(‚ÄúCustom‚Äù).</p>
<p>Pour l‚Äôexemple, j‚Äôai ajout√© deux machines au cluster nomm√©es node1 et
node2, et j‚Äôai ajout√© l‚Äôh√¥te Rancher lui-m√™me self
(c‚Äôest possible mais non recommand√©).</p>
<p><img src="/assets/rancher/host.png" alt="Hosts"></p>
<h4 id="cr√©er-son-service"><a href="#cr%C3%A9er-son-service" class="phenomic-HeadingAnchor">#</a>Cr√©er son service</h4>
<p>Il faut maintenant cr√©er une stack pour accueillir notre service whoami.
Dans la logique Rancher, une stack est un ensemble de services.</p>
<p><img src="/assets/rancher/stack.png" alt="Stack"></p>
<p>On peut remarquer que pour l‚Äôajout d‚Äôune stack, on peut importer un
fichier <code>docker-compose.yml</code> et un fichier <code>rancher-compose.yml</code>.</p>
<p>Le fichier docker-compose.yml d√©finit la structure de la stack,
l‚Äôensemble de ses services ainsi que leurs configurations.
Ce fichier est natif de l‚Äôapi Docker Compose.`</p>
<p>Le fichier rancher-compose est un ‚Äúadd-on‚Äù au docker compose,
il permet de configurer des param√®tres Rancher comme la configuration
des loadbalancer (HA-Proxy) et la scalabilit√© horizontale des services.
Ces deux fichiers sont exportables √† tout moment, cela peut-√™tre tr√®s
pratique pour une r√©installation (par exemple, voici la
<a href="https://drive.google.com/file/d/0B0NhGeba-vjZVnJldGRYUTBZaGs/view">configuration de la stack</a>
qui est install√©e dans cette partie).</p>
<p>Une fois la stack cr√©√©e en lui donnant uniquement un nom, il faut
ajouter notre service whoami. Pour cela il suffit de cliquer sur
‚ÄúAdd service‚Äù et de le d√©finir comme cela.</p>
<p><img src="/assets/rancher/whoami.png" alt="Whoami example"></p>
<p>On remarque que seul le nom du service, l‚Äôimage docker et le ‚Äúport map‚Äù
ont √©t√© d√©finis (ie: c‚Äôest un exemple simple, vous pouvez voir par les
onglets du bas que la configuration peut √™tre beaucoup plus pouss√©e,
gestion des volumes, du network du service, des HealthCheck).</p>
<p>Apr√®s cette simple configuration, il suffira de cliquer sur ‚ÄúCreate‚Äù et
informagiquement votre service sera d√©ploy√© sur un host choisi par Cattle.</p>
<p>Vous allez me dire, ‚Äúqu‚Äôest ce que Cattle ?‚Äù, et vous aurez raison.
Cattle est l‚Äôorchestrateur par d√©faut utilis√© par Rancher. Il est
maintenu par l‚Äô√©quipe de Rancher et le projet est open-source et
disponible sur Github.</p>
<p>Sachez que Rancher fonctionne √©galement avec Kubernetes, Swarm et
Mesos mais pour cet article, je me suis limit√© √† l‚Äôutilisation de Cattle.</p>
<h4 id="scaler-et-loadbalancer"><a href="#scaler-et-loadbalancer" class="phenomic-HeadingAnchor">#</a>Scaler et Loadbalancer</h4>
<p>Apr√®s quelques temps de d√©marrage, votre service whoami devrait √™tre
disponible.</p>
<p><img src="/assets/rancher/start.png" alt="Start"></p>
<p>Si vous cliquez sur le ‚Äú80‚Äù, vous devez acc√©der au service whoami.
Il vous donnera plusieurs informations sur lui-m√™me, notamment son nom.</p>
<p>Le but maintenant est de scaler notre service, afin de le distribuer
sur plusieurs machines.</p>
<p>Dans le d√©tail du service, on peut voir que la scale est actuellement
d√©finie √† 1. Il suffirait donc de l‚Äôaugmenter ? Et bien non, le service
que nous venons de d√©finir occupe le port 80 de la machine. Il ne
pourrait donc pas √™tre disponible plus d‚Äôune fois par machine. Et c‚Äôest
l√† l‚Äôune des probl√©matiques des microservices :  l‚Äôallocation dynamique
de port et la ‚Äúconnaissance‚Äù des services par le loadbalancer. Rancher
offre une solution simple √† ce probl√®me, il ne faut plus r√©server de
port pour son application, le loadbalancer va conna√Ætre les services
par l‚Äôorchestrateur.</p>
<p>Il faut donc supprimer la configuration du port statique du service.</p>
<p>Une fois le port lib√©r√© , il faut donc cr√©er un loadbalancer qui
distribue la charge entre les instances de whoami. Dans la stack,
cliquez sur ‚ÄúAdd Load Balancer‚Äù</p>
<p><img src="/assets/rancher/loadb.png" alt="Load balancer"></p>
<p>Une fois le loadbalancer cr√©√©, on peut donc augmenter la scale de son
application sans avoir de probl√®me d‚Äôallocation de port. Si vous cliquez
le ‚Äú80‚Äù du loadbalancer, vous devez atteindre votre service, et s‚Äôil
est scal√©, l‚Äôhostname devrait changer au refresh.</p>
<p>A ce stade du d√©ploiement, on peut se demander, ce qu‚Äôil en est de
l‚Äôinfrastructure des machines  cr√©√©es plus t√¥t.</p>
<p><img src="/assets/rancher/host2.png" alt="Hosts"></p>
<p>Rancher a d√©ploy√© les conteneurs docker de fa√ßon √©quilibr√©e entre les
diff√©rentes machines. On peut d√©finir nos propres r√®gles de d√©ploiement
par l‚Äôutilisation de label sur les machines.</p>
<p>Par exemple, on peut ajouter le label ‚Äúname = frontend‚Äù, et pour chaque
service que l‚Äôon cr√©e, d√©finir si il peut d√©marrer ou non sur la machine
dont le name est frontend.</p>
<p>Sur chacun des conteneurs, rancher nous permet d‚Äôacc√©der √† un shell et
une vue des logs, ce qui est tr√®s pratique pour le d√©bug.</p>
<p>Certes cet exemple √©tait simple, mais on peut facilement d√©ployer des
architectures plus complexes gr√¢ce √† Rancher, et c‚Äôest l√† tout son
int√©r√™t. Voici l‚Äôarchitecture des services de l‚Äôun des projets que j‚Äôai
d√©ploy√© gr√¢ce √† lui.</p>
<p><img src="/assets/rancher/microservices.png" alt="Hosts"></p>
<h3 id="un-¬´-bluegreen-deployement-¬ª--et-une-rolling-upgrade-en-5-minutes"><a href="#un-%C2%AB-bluegreen-deployement-%C2%BB--et-une-rolling-upgrade-en-5-minutes" class="phenomic-HeadingAnchor">#</a>Un ¬´ blue/green deployement ¬ª  et une ‚Äúrolling upgrade‚Äù en 5 minutes</h3>
<p>Dans la plupart des cas, une mise en production est souvent un
passage difficile pour le d√©veloppeur. Les outils DevOps ont bien
√©videmment permis de simplifier cette √©tape cruciale de la vie d‚Äôun
projet.</p>
<p>Rancher permet d‚Äôutiliser plusieurs m√©thodes pour mettre √† jour un
service d√©j√† en production tout en garantissant la continuit√© des
services :</p>
<h4 id="la-rolling-upgrade-remplacement-dun-service-par-un-autre"><a href="#la-rolling-upgrade-remplacement-dun-service-par-un-autre" class="phenomic-HeadingAnchor">#</a>La rolling upgrade (remplacement d‚Äôun service par un autre)</h4>
<p><img src="/assets/rancher/indiana.gif" alt="Hosts"></p>
<h4 id="le-bluegreen-deployement"><a href="#le-bluegreen-deployement" class="phenomic-HeadingAnchor">#</a>Le blue/green deployement</h4>
<p>Ces deux m√©thodes ont √©t√© pr√©sent√©es par Christophe Furmaniak et
Youcef Yekhlef (deux consultants architectes de Zenika) lors de leur
intervention √† de pendant la Devoxx 2016. Je ne peux que vous
conseiller de la regarder :</p>
<div style="position:relative;height:0;padding-bottom:56.25%">
<iframe src="https://www.youtube.com/embed/QFqt8xMTChY?ecver=2" width="640" height="360" frameborder="0" style="position:absolute;width:100%;height:100%;left:0" allowfullscreen></iframe>
</div>
<h3 id="un-service-dns-et-network-overlay"><a href="#un-service-dns-et-network-overlay" class="phenomic-HeadingAnchor">#</a>Un service DNS et Network overlay</h3>
<p>Pour ceux qui ont d√©j√† bien pratiqu√© Docker, faire communiquer deux
containeurs entre eux sans avoir d‚Äôoutil d‚Äôorchestration n‚Äôest pas tr√®s
ais√©. Bien s√ªr, il y a la publication de port sur le Host, mais on
arrive vite aux limites. Rancher apporte nativement une fonctionnalit√©
d‚Äôoverlay network via un tunnel ipsec permettant √† deux containers sur
deux machines diff√©rentes d‚Äô√™tre sur le m√™me r√©seau virtuel. Rancher va
plus loin puisqu‚Äôil poss√®de son service DNS dans lequel il enregistre
chaque nouveau container qu‚Äôil cr√©e. Cela a plusieurs avantages:</p>
<ul>
<li>Deux services d‚Äôune m√™me Stack se connaissent par leur nom ;</li>
<li>Un service peut conna√Ætre un service d‚Äôune autre stack par <code>nomService.nomStack</code>.</li>
</ul>
<h3 id="un-catalogue-qui-senrichit"><a href="#un-catalogue-qui-senrichit" class="phenomic-HeadingAnchor">#</a>Un catalogue qui s‚Äôenrichit</h3>
<p><img src="/assets/rancher/catalogue.png" alt="Rancher catalogue"></p>
<p>Rancher poss√®de son propre catalogue d‚Äôapplications, ces applications
sont sous la forme de groupes de stacks pr√©-configur√©es qui s‚Äôappuient
sur les images du Docker Hub :</p>
<ul>
<li>La stack Elastic ;</li>
<li>Janitor, un service bas√© sur docker-cleanup, pour nettoyer les images et conteneurs non-utilis√©s. ;</li>
<li>Traefik, un load balancer d√©velopp√© en Go par Emile Vauge de la Zstartup Containous ;</li>
<li>Gluster, un gestionnaire de volume partag√© ;</li>
<li>Odoo, le c√©l√®bre ERP open source ;</li>
<li>etc.</li>
</ul>
<p>Il est aussi possible d‚Äôajouter son propre
<a href="http://docs.rancher.com/rancher/v1.5/en/catalog/">catalogue de stacks d‚Äôentreprise</a></p>
<p>Je vous ai pr√©sent√© ici les principales features de Rancher,
je ne peux que vous conseiller de le tester pour faire joujou avec vos
conteneurs Docker. Cependant, la question qu‚Äôon peut encore se poser
aujourd‚Äôhui reste la suivante : Rancher ne restera-t-il qu‚Äôun joujou
pour orchestrer des services ? On sait d√©j√† que des entreprises comme
Orange et Sony commencent √† l‚Äôutiliser pour des besoins interne
(cf : Sony et le playstation Network <a href="https://www.youtube.com/watch?v=hwhxXwT6zlw">https://www.youtube.com/watch?v=hwhxXwT6zlw</a>)</p>
<p>N‚Äôh√©sitez surtout pas √† partager vos exp√©riences avec Rancher.</p>
<p>Merci encore √† Youcef Yekhlef, Christophe Furmaniak et √† mon tuteur de
stage Christophe Tardella pour l‚Äôaide apport√©e √† la r√©daction de cet article.</p>
]]></description><link>http://slashgear.github.io/posts/rancher/</link><guid isPermaLink="true">http://slashgear.github.io/posts/rancher/</guid><pubDate>Mon, 13 Jun 2016 00:00:00 GMT</pubDate></item><item><title><![CDATA[Kotlin in action]]></title><description><![CDATA[<h1 id="mes-impressions-sur-le-kotlin-suite-au-mix-it-2016"><a href="#mes-impressions-sur-le-kotlin-suite-au-mix-it-2016" class="phenomic-HeadingAnchor">#</a>Mes impressions sur le Kotlin suite au Mix-IT 2016</h1>
<p>JetBrains, pour les d√©veloppeurs Java enferm√©s dans une grotte et ne
connaissant qu‚ÄôEclipse, outre le fait de fournir une suite d‚Äôoutils
pour le d√©veloppement et un IDE Java (IntelliJ), s‚Äôest lanc√© en 2011
dans la cr√©ation d‚Äôun nouveau langage de programmation. <strong>Plein de
promesses, ce langage, le Kotlin, pr√©sent√© par Hadi Harriri lors du
Mix-it 2016, m‚Äôa fait forte impression.</strong></p>
<p>Du jeudi 21 au vendredi 22 avril 2016 se tenait √† Lyon la sixi√®me
√©dition du Mix-IT. Rassemblant plus de 600 participants, cette
convention aux allures de grande f√™te pour d√©veloppeurs et agilistes
permettaient de suivre talks, ateliers, conf√©rences mais √©galement
d‚Äô√©changer autour d‚Äôune d√©licieuse cr√™pe suzette avec des passionn√©s
venus du monde entier.</p>
<p>En attendant l‚Äôarticle de retour sur le Mix-IT, revenons-en au
sujet principal de cet article, le Kotlin. Ne connaissant alors ce
langage que de nom, j‚Äô√©tais tr√®s intrigu√© par la pr√©sentation de
Mr Hadi Harriri nomm√©e ‚ÄúKotlin : ready for production‚Äù. Apr√®s une
pr√©sentation assez sommaire de l‚Äôhistorique du langage et de l‚Äôobjectif
du projet de Jetbrains, on comprend assez rapidement qu‚Äôen introduisant
le Kotlin, la firme internationale tente de r√©pondre aux besoins des
d√©veloppeurs Java en rassemblant dans un langage le meilleur du Scala,
des avantages du C#, et une concision pouss√©e √† l‚Äôextr√™me. C‚Äôest √† se
demander si la firme perd espoir en Oracle pour sortir de nouvelles
versions de Java plus ambitieuses.</p>
<h2 id="la-concision-ok"><a href="#la-concision-ok" class="phenomic-HeadingAnchor">#</a>La concision ok</h2>
<p>Comme je le dis plus haut, la concision √©tait une volont√© et un objectif
tr√®s clair de Jetbrains pour la cr√©ation du langage Kotlin. Il est
vrai qu‚Äôen Java, on peut tr√®s facilement  se retrouver √† avoir du
Boilerplate un peu partout. On pense aux getter/setter, tr√®s verbeux
pour finalement une fonctionnalit√© qu‚Äôon peut r√©sumer habilement.
√âvidemment, des plugins comme Lombok permettent par annotation de
r√©duire tous ce volume de code.</p>
<p><em>Afin de vous montrer un exemple de concision, voici une comparaison
entre un objet tr√®s simple en Java et l‚Äôexact √©quivalent en Kotlin.</em></p>
<p>Version Java :</p>
<pre><code class="hljs language-java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Cloneable</span></span>{

  <span class="hljs-keyword">private</span> String name;

  <span class="hljs-keyword">private</span> Integer id;

  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Person</span><span class="hljs-params">(String name,Integer id)</span></span>{
    <span class="hljs-keyword">this</span>.name = name;
    <span class="hljs-keyword">this</span>.id = id;
  }

  <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getName</span><span class="hljs-params">()</span></span>{
    <span class="hljs-keyword">return</span> name;
  }

  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setName</span><span class="hljs-params">(String name)</span></span>{
    <span class="hljs-keyword">this</span>.name = name;
  }

  <span class="hljs-function"><span class="hljs-keyword">public</span> Integer <span class="hljs-title">getId</span><span class="hljs-params">()</span></span>{
    <span class="hljs-keyword">return</span> id;
  }

  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setId</span><span class="hljs-params">(Integer id)</span></span>{
    <span class="hljs-keyword">this</span>.id = id;
  }
  <span class="hljs-meta">@Override</span>
  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">equals</span><span class="hljs-params">(Object obj)</span> </span>{
    <span class="hljs-keyword">if</span> (obj == <span class="hljs-keyword">this</span>) {
      <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;
    }
    <span class="hljs-keyword">if</span> (obj == <span class="hljs-keyword">null</span> || obj.getClass() != <span class="hljs-keyword">this</span>.getClass()) {
      <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;
    }
    Person guest = (Person) obj;
    <span class="hljs-keyword">return</span> id == guest.id &#x26;&#x26; (name == guest.getName || (name != <span class="hljs-keyword">null</span> &#x26;&#x26; name.equals(guest.getName()))));
  }

  <span class="hljs-meta">@Override</span>
  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">hashCode</span><span class="hljs-params">()</span> </span>{
    <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> prime = <span class="hljs-number">31</span>;
    <span class="hljs-keyword">int</span> result = <span class="hljs-number">1</span>;
    result = prime * result + ((name == <span class="hljs-keyword">null</span>) ? <span class="hljs-number">0</span> : name.hashCode());
    result = prime * result + id;
    <span class="hljs-keyword">return</span> result;
  }

  <span class="hljs-meta">@Override</span>
  <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span></span>{
    <span class="hljs-keyword">return</span><span class="hljs-string">"Person(name="</span>+name+<span class="hljs-string">",id="</span>+id<span class="hljs-string">")"</span>;
  }

  <span class="hljs-meta">@Override</span>
  <span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">clone</span><span class="hljs-params">()</span></span>{
     Person person = <span class="hljs-keyword">null</span>;
	    <span class="hljs-keyword">try</span> {
	      	person = (Person) <span class="hljs-keyword">super</span>.clone();
	    } <span class="hljs-keyword">catch</span>(CloneNotSupportedException cnse) {
	      	cnse.printStackTrace(System.err);
	    }
	    person.name = (String) name.clone();
	    person.id = (Integer) id.clone();
	    <span class="hljs-keyword">return</span> person;
  }
}</code></pre>
<p>Version Kotlin :</p>
<pre><code class="hljs language-kotlin">dat <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span></span>(<span class="hljs-keyword">val</span> name: String, <span class="hljs-keyword">val</span> id: <span class="hljs-built_in">Int</span>)</code></pre>
<p>Les fonctions venant de Object (toString,equals,..) sont apport√©es par
le mot clef ‚Äúdata‚Äù devant ‚Äúclass‚Äù dans le fichier Kotlin.</p>
<h2 id="des-fonctionnalit√©s-int√©ressantes"><a href="#des-fonctionnalit%C3%A9s-int%C3%A9ressantes" class="phenomic-HeadingAnchor">#</a>Des fonctionnalit√©s int√©ressantes</h2>
<p>Lors de la conf√©rence du Mix-IT, j‚Äôai pu rep√©rer quelques
fonctionnalit√©s qui me semblent r√©ellement int√©ressantes √† vous
partager dans cet article. Cette liste n‚Äôest pas exhaustive, mais
devrait vous donnez un aper√ßu des possibilit√©s.</p>
<h2 id="classes"><a href="#classes" class="phenomic-HeadingAnchor">#</a>Classes</h2>
<p>Pour d√©clarer une classe en Kotlin, on peut se d√©barrasser des
getter/setter, on peut d√©finir un constructeur principal. En outre,
on peut m√™me d√©finir la mutabilit√© des attributs de la classe gr√¢ce
aux mots cl√©s var (mutable) et val (read-only).</p>
<pre><code class="hljs language-kotlin"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span></span>(<span class="hljs-keyword">val</span> firstName: String, <span class="hljs-keyword">val</span> lastName: String, <span class="hljs-keyword">var</span> age: <span class="hljs-built_in">Int</span>) {
  <span class="hljs-comment">// ...</span>
}</code></pre>
<h2 id="d√©clarations-de-fonction-sans-accolades-inline"><a href="#d%C3%A9clarations-de-fonction-sans-accolades-inline" class="phenomic-HeadingAnchor">#</a>D√©clarations de fonction sans accolades (inline)</h2>
<p>On peut d√©clarer des fonctions sans accolades, c‚Äôest assez compacte.
On perd un peu en lisibilit√© mais on gagne en espace.</p>
<pre><code class="hljs language-kotlin">(<span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">add</span><span class="hljs-params">(i: <span class="hljs-type">Int</span>, j:<span class="hljs-type">Int</span>)</span></span> = i + j)</code></pre>
<h2 id="des-conditions-plus-simples"><a href="#des-conditions-plus-simples" class="phenomic-HeadingAnchor">#</a>Des conditions plus simples</h2>
<p>Adieu le switch au profit du when avec des ‚Äúarrow operators‚Äù.</p>
<pre><code class="hljs language-kotlin"><span class="hljs-keyword">when</span> (x) {
  <span class="hljs-number">1</span> -> print(<span class="hljs-string">"x == 1"</span>)
  <span class="hljs-number">2</span> -> print(<span class="hljs-string">"x == 2"</span>)
  <span class="hljs-keyword">else</span> -> { <span class="hljs-comment">// Note the block</span>
    print(<span class="hljs-string">"x is neither 1 nor 2"</span>)
  }
}</code></pre>
<p>Pour les boucles rien de sp√©cial √† noter de particulier mais c‚Äôest sur l‚Äôop√©ration ‚Äúif‚Äù qu‚Äôon peut observer un ajout tr√®s pratique.</p>
<pre><code class="hljs language-kotlin"><span class="hljs-keyword">val</span> max = <span class="hljs-keyword">if</span> (a > b) {
    print(<span class="hljs-string">"Choose a"</span>)
    a
  } <span class="hljs-keyword">else</span> {
    print(<span class="hljs-string">"Choose b"</span>)
    b
  }</code></pre>
<p>La derni√®re expression du block if est la valeur du block. On √©vite
donc l‚Äôinitialisation de variables en dehors du bloc et √©vite sa
modification dans chacune des branches. On peut remarquer que
l‚Äôop√©rateur de fin d‚Äôinstruction ‚Äò;‚Äô dispara√Æt (en r√©alit√©
il est optionnel)</p>
<h2 id="adieu-les-nullpointerexception"><a href="#adieu-les-nullpointerexception" class="phenomic-HeadingAnchor">#</a>Adieu les ‚ÄúNullPointerException‚Äù</h2>
<p>Kotlin a √©t√© pens√© pour √©viter les danger des r√©f√©rences null et faire
dispara√Ætre les NullPointerException et les ‚Äúnull-check‚Äù.</p>
<pre><code class="hljs language-kotlin"><span class="hljs-keyword">var</span> a: String = <span class="hljs-string">"abc"</span>
a = <span class="hljs-literal">null</span> <span class="hljs-comment">// compilation error</span>
To allow nulls, we can declare a variable <span class="hljs-keyword">as</span> nullable string, written String?:

<span class="hljs-keyword">var</span> b: String? = <span class="hljs-string">"abc"</span>
b = <span class="hljs-literal">null</span> <span class="hljs-comment">// ok</span>

b?.length</code></pre>
<p>On ne peut pas affecter √† une variable la valeur null si on n‚Äôa pas
d√©lib√©r√©ment d√©fini cette variable comme nullable. Le Kotlin introduit
√©galement le ‚Äúcall safe operator‚Äù qui permet de tester la nullit√© d‚Äôune
variable avant l‚Äôappel d‚Äôun fonction sur cette variable.</p>
<h2 id="des-fonctions-callable"><a href="#des-fonctions-callable" class="phenomic-HeadingAnchor">#</a>Des fonctions ‚ÄúCallable‚Äù</h2>
<p>En Kotlin, une fonction peut √™tre d√©clar√©e en dehors d‚Äôun objet. Cela
peut para√Ætre √©trange vis √† vis du Java mais cette fonctionnalit√© peut
√™tre tr√®s pratique, en particulier pour d√©clarer la fonction main de
son projet.</p>
<p>Une fonction d√©clar√©e en dehors d‚Äôun objet peut √™tre appel√© de
n‚Äôimporte quel endroit de cette fa√ßon :</p>
<pre><code class="hljs language-kotlin"><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">hello</span><span class="hljs-params">()</span></span>{
  print(<span class="hljs-string">"hello"</span>)
}


<span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>{
  ::hello()
}</code></pre>
<h2 id="la-programmation-fonctionnelle-pour-les-gouverner-tous"><a href="#la-programmation-fonctionnelle-pour-les-gouverner-tous" class="phenomic-HeadingAnchor">#</a>La programmation fonctionnelle pour les gouverner tous</h2>
<p>Le paradigme fonctionnelle est bien s√ªr pr√©sent dans le langage.  Il
permet de r√©aliser toutes les op√©rations usuelles (map, reduce,
forEach,etc,..)</p>
<pre><code class="hljs language-kotlin"><span class="hljs-keyword">var</span> sum = <span class="hljs-number">0</span>
ints.filter { it > <span class="hljs-number">0</span> }.forEach {
  sum += it
}
print(sum)</code></pre>
<h2 id="les-extension-functions"><a href="#les-extension-functions" class="phenomic-HeadingAnchor">#</a>Les ‚ÄúExtension Functions‚Äù</h2>
<p>En Kotlin on peut ‚Äú√©tendre‚Äù une classe par une fonction de mani√®re
assez simple. On peut donc facilement rajouter des m√©thodes sans passer
par un h√©ritage.</p>
<pre><code class="hljs language-kotlin"><span class="hljs-function"><span class="hljs-keyword">fun</span> MutableList<span class="hljs-type">&#x3C;Int></span>.<span class="hljs-title">swap</span><span class="hljs-params">(index1: <span class="hljs-type">Int</span>, index2: <span class="hljs-type">Int</span>)</span></span> {
  <span class="hljs-keyword">val</span> tmp = <span class="hljs-keyword">this</span>[index1] <span class="hljs-comment">// 'this' corresponds to the list</span>
  <span class="hljs-keyword">this</span>[index1] = <span class="hljs-keyword">this</span>[index2]
  <span class="hljs-keyword">this</span>[index2] = tmp
}</code></pre>
<p>Ici le mot-cl√© ‚Äúthis‚Äù permet d‚Äôacc√©der √† l‚Äôobjet √©tendu.</p>
<h2 id="linterop√©rabilit√©"><a href="#linterop%C3%A9rabilit%C3%A9" class="phenomic-HeadingAnchor">#</a>L‚Äôinterop√©rabilit√©</h2>
<p>La question soulev√©e par ce nouveau langage vient assez rapidement.
Peut-on facilement passer de Java √† Kotlin? Est-ce que notre code
Kotlin va fonctionner avec tous le code Java que l‚Äôon a d√©j√†?
Est-ce que nos outils actuels sont adapt√©s au d√©veloppement Kotlin?</p>
<h2 id="les-ide"><a href="#les-ide" class="phenomic-HeadingAnchor">#</a>Les IDE</h2>
<p>Bien √©videmment, JetBrains met ses produits en avant pour
l‚Äôutilisation du Kotlin. On peut en effet utiliser leur c√©l√®bre IDE
Intellij pour d√©velopper dans ce langage. Cerise sur la g√¢teau, on
peut m√™me utiliser la version Community gratuite pour se faire une
id√©e. Il existe √©galement un plugin pour Eclipse. Par contre, aucun
projet de plugin n‚Äôest en cours pour NetBeans.</p>
<h2 id="java"><a href="#java" class="phenomic-HeadingAnchor">#</a>Java</h2>
<p>Kotlin permet √©galement une compatibilit√© avec toutes les
librairies Java, c‚Äôest s√ªrement l‚Äôargument le plus fort et √©videmment
mis en avant par JetBrains. Le code cr√©√© peut donc fonctionner sur une
JVM de la version 6 √† 8.</p>
<p>On peut donc profiter de tous les avantages du langage Kotlin tout en
restant 10 ans en arri√®re cot√© virtual machine.
Enfin, aucune modification n‚Äôest n√©cessaire pour faire int√©ragir du
code Java avec du Kotlin. De plus, l‚Äôappel de m√©thode Java est
compl√®tement transparent pour le Kotlin.</p>
<h2 id="javascript"><a href="#javascript" class="phenomic-HeadingAnchor">#</a>Javascript</h2>
<p>Et oui, JetBrains n‚Äôa pas voulu ignorer le mouvement r√©cent du
d√©veloppement Javascript. On peut donc cibler le langage Javascript au
build afin de faire tourner son application Kotlin sur un
environnement NodeJS ou bien dans un navigateur.Cette fonctionnalit√©
est donc √† tester. On tient peut-√™tre ici une alternative au
TypeScript ?‚Ä¶ mais √ßa reste √† mes yeux gadget.</p>
<h2 id="android"><a href="#android" class="phenomic-HeadingAnchor">#</a>Android</h2>
<p>N‚Äôayant fait que quelques Lab Android, je n‚Äôai pas forc√©ment une
vision compl√®te de l‚Äôenvironnement, mais je me souviens avoir √©t√© g√™n√©
par le nombre de ligne de code Java n√©cessaire pour obtenir une si
simple application mobile.</p>
<p>Il se trouve que l‚Äôon peut d√®s aujourd‚Äôhui d√©velopper des applications
mobiles Android depuis l‚ÄôIDE recommand√© par Google
(i.e: Android Studio) en Kotlin, √† tester pour les amateurs.</p>
<h2 id="spring-boot"><a href="#spring-boot" class="phenomic-HeadingAnchor">#</a>Spring Boot</h2>
<p>Enfin, on peut voir que le Kotlin int√©resse les committers du projet
Spring, notamment le lyonnais S√©bastien Deleuze avec cet article
intitul√© Developing Spring Boot applications with Kotlin. Voir autant
d‚Äôeffervescence autour de ce langage rassure un peu, et
personnellement je pense tenter l‚Äôutilisation du Kotlin dans le
contexte Spring Boot pour me faire une id√©e plus objective sur le sujet.</p>
<p>D‚Äôailleurs, le Spring Initializr int√®gre depuis quelques temps
l‚Äôoption de g√©n√©ration de projet Spring Boot en Kotlin.</p>
<p>N‚Äôh√©sitez pas √† aller tester ce langage sur le site et vous faire
votre propre avis sur ce langage. Quand √† moi, je vais rapidement
l‚Äôessayer pour un de mes projets.</p>
<p>D‚Äôautres ressources sont disponibles sur le Github d‚Äô<a href="https://github.com/hhariri/awesome-kotlin">Hadi Hariri</a>
pourraient vous int√©resser</p>
]]></description><link>http://slashgear.github.io/posts/kotlin/</link><guid isPermaLink="true">http://slashgear.github.io/posts/kotlin/</guid><pubDate>Tue, 26 Apr 2016 00:00:00 GMT</pubDate></item></channel></rss>